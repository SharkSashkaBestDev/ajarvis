{"make_click": {"name": "click", "phrase": "сделай клик", "paramType": {"xy": "int[2", "type": "enum[двойной, одинарный", "russian": {"xy": "координаты", "type": "тип клика"}}, "returnType": {"xy": "int[2"}, "code": "import pyautogui\n\n\ndef click(data):\n    try:\n        if 'xy' in data:\n            x, y = data['xy']\n        else:\n            x, y = pyautogui.position()\n            data['xy'] = x, y\n        if pyautogui.onScreen(x, y):\n            if data['type'] == 'двойной':\n                pyautogui.doubleClick(x, y)\n            else:\n                pyautogui.click(x, y)\n        else:\n            size = pyautogui.size()\n            data['error'] = f\"Эти координаты ({x}; {y}) \" \\\n                f\"находятся вне вашего экрана ({size.width}; {size.height})\"\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\nclick(data)\n", "language": "PYTHON", "_id": "90f61072-dbb9-4de8-9483-49dedbc19da2"}, "open_browser": {"name": "open_browser", "phrase": "открой браузер", "code": "import webbrowser\n\n\ndef open_browser(data):\n    webbrowser.open_new(\"http://google.com\")\n    return data\n\n\nopen_browser(data)", "language": "PYTHON", "_id": "a553ad36-9bf2-4e0d-94c0-7f99907e1c31"}, "detect_image": {"name": "detect_image", "phrase": "найди изображение", "paramType": {"file": "path", "russian": {"file": "путь к изображению"}}, "returnType": {"xy": "int[2"}, "code": "import pyautogui\nfrom pyscreeze import ImageNotFoundException\n\n\ndef detect_image(data):\n    try:\n        file = data['file']\n        x, y = pyautogui.locateCenterOnScreen(file, confidence=0.9)\n        data['xy'] = int(x), int(y)\n        pyautogui.moveTo(x, y)\n    except ImageNotFoundException:\n        data['error'] = \"Не нашел такое изображение на экране\"\n    except OSError:\n        data['error'] = \"Не нашел ваше изображение в файловой системе. \" \\\n                        \"Проверьте название файла.\"\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\ndetect_image(data)\n", "language": "PYTHON", "_id": "fd13d9cd-0438-42a8-891b-524373c64de8"}, "mouse_shift": {"name": "mouse_shift", "phrase": "сдвинь мышку", "paramType": {"direction": "enum[выше, ниже, левее, правее", "russian": {"direction": "направление"}}, "returnType": {"xy": "int[2"}, "code": "import pyautogui\n\n\ndef shift(data):\n    try:\n        SHIFT = 20\n        xOffset = 0\n        yOffset = 0\n        if 'direction' in data:\n            if data['direction'] == 'выше':\n                yOffset = -SHIFT\n            if data['direction'] == 'ниже':\n                yOffset = SHIFT\n            if data['direction'] == 'левее':\n                xOffset = -SHIFT\n            if data['direction'] == 'правее':\n                xOffset = SHIFT\n            pyautogui.move(xOffset, yOffset)\n            data['xy'] = pyautogui.position()\n        else:\n            data['error'] = \"Требуется аргумент 'direction'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\nshift(data)", "language": "PYTHON", "_id": "97e3487f-3c2e-4deb-813a-f6fac48c8284"}, "mouse_move_corner": {"name": "mouse_move_corner", "phrase": "перемести мышку в угол", "paramType": {"horizontal": "enum[правый, левый", "vertical": "enum[верхний, нижний", "russian": {"horizontal": "угол по горизонтали", "vertical": "угол по вертикали"}}, "returnType": {"xy": "int[2"}, "code": "import pyautogui\n\npyautogui.FAILSAFE = False\n\ndef move_corner(data):\n    try:\n        width, height = pyautogui.size()\n        x = width if data['horizontal'] == 'правый' else 0\n        y = height if data['vertical'] == 'нижний' else 0\n        pyautogui.moveTo(x, y)\n        data['xy'] = pyautogui.position()\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\nmove_corner(data)", "language": "PYTHON", "_id": "995b08fd-99ac-424b-9225-bf2ff8ea4be2"}, "mouse_move": {"name": "mouse_move", "phrase": "перемести мышку", "paramType": {"xy": "int[2", "russian": {"xy": "координаты"}}, "returnType": {"xy": "int[2"}, "code": "import pyautogui\n\n\ndef mouse_move(data):\n    if 'xy' in data:\n        x, y = data['xy']\n        if pyautogui.onScreen(x, y):\n            pyautogui.moveTo(*data['xy'])\n        else:\n            size = pyautogui.size()\n            data['error'] = f\"Эти координаты ({x}; {y}) \" \\\n                f\"находятся вне вашего экрана ({size.width}; {size.height})\"\n    else:\n        data['error'] = \"Требуется аргумент 'xy'\"\n    return data\n\nmouse_move(data)", "language": "PYTHON", "_id": "a4fdb123-8a49-4356-9334-f4e04f9ba829"}, "press_enter": {"name": "press_enter", "phrase": "нажми enter", "code": "import pyautogui\n\n\ndef press_enter(data):\n    pyautogui.press('enter')\n    return data\n\npress_enter(data)", "language": "PYTHON", "_id": "aaedfc9f-da43-4039-9751-43e7b4925c22"}, "write_phrase": {"name": "write_phrase", "phrase": "напиши", "paramType": {"text": "String", "russian": {"text": "текст"}}, "code": "import platform\n\nimport pyautogui\nimport pyperclip\n\n\ndef write_phrase(data):\n    if 'text' in data:\n        pyperclip.copy(data['text'])\n        command = \"command\" if platform.system() == \"Darwin\" else \"ctrl\"\n        pyautogui.hotkey(command, \"v\")\n        del data['text']\n    else:\n        data['error'] = \"Требуется аргумент 'text\"\n    return data\n\nwrite_phrase(data)\n", "language": "PYTHON", "_id": "d5fb893c-4010-4b9f-bf63-0ab440d0c0ae"}, "detect_shapes": {"name": "detect_shapes", "phrase": "найди объекты", "paramType": {"color": "String", "shape": "enum[линия, прямоугольник, всё", "width_low": "int", "width_up": "int", "height_low": "int", "height_up": "int", "russian": {"color": "цвет", "shape": "форма", "width_low": "минимальная ширина", "width_up": "максимальная ширина", "height_low": "минимальная высота", "height_up": "максимальная высота"}}, "returnType": {"shapes": "int[][2", "img": "path"}, "code": "import cv2\nimport numpy as np\nimport pyautogui\n\n\ncolors = {\n    'белый': (\n        (\n            (0.0, 0.0, 242.24999999999997),\n            (178.50277777777777, 63.74999999999999, 254.99999999999997)\n        ),\n    ),\n    'бирюзовый': (\n        (\n            (79.55555555555556, 127.49999999999999, 63.74999999999999),\n            (94.47222222222223, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (79.55555555555556, 63.74999999999999, 127.49999999999999),\n            (94.47222222222223, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'жёлтый': (\n        (\n            (19.88888888888889, 127.49999999999999, 63.74999999999999),\n            (37.291666666666664, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (19.88888888888889, 63.74999999999999, 127.49999999999999),\n            (37.291666666666664, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'желтый': (\n        (\n            (19.88888888888889, 127.49999999999999, 63.74999999999999),\n            (37.291666666666664, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (19.88888888888889, 63.74999999999999, 127.49999999999999),\n            (37.291666666666664, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'зелёный': (\n        (\n            (37.291666666666664, 127.49999999999999, 63.74999999999999),\n            (79.55555555555556, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (37.291666666666664, 63.74999999999999, 127.49999999999999),\n            (79.55555555555556, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'зеленый': (\n        (\n            (37.291666666666664, 127.49999999999999, 63.74999999999999),\n            (79.55555555555556, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (37.291666666666664, 63.74999999999999, 127.49999999999999),\n            (79.55555555555556, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'красный': (\n        (\n            (169.05555555555554, 127.49999999999999, 63.74999999999999),\n            (178.50277777777777, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (169.05555555555554, 63.74999999999999, 127.49999999999999),\n            (178.50277777777777, 127.49999999999999, 254.99999999999997)\n        ),\n        (\n            (0.0, 127.49999999999999, 63.74999999999999),\n            (7.458333333333333, 254.99999999999997, 254.99999999999997)\n        ),\n        (\n            (0.0, 63.74999999999999, 127.49999999999999),\n            (7.458333333333333, 127.49999999999999, 254.99999999999997)\n        )\n    ),\n    'оранжевый': (((7.458333333333333, 127.49999999999999, 63.74999999999999),\n                (19.88888888888889, 254.99999999999997, 254.99999999999997)),\n                ((7.458333333333333, 63.74999999999999, 127.49999999999999),\n                (19.88888888888889, 127.49999999999999, 254.99999999999997))),\n    'серый': (\n        (\n            (0.0, 0.0, 25.5),\n            (178.50277777777777, 254.99999999999997, 63.74999999999999)\n        ),\n        \n    ),\n    'светло-серый': (\n        (\n            (0.0, 0.0, 63.74999999999999),\n            (178.50277777777777, 63.74999999999999, 242.24999999999997)\n        ), \n    ),\n    'синий': (((94.47222222222223, 127.49999999999999, 63.74999999999999),\n            (129.27777777777777, 254.99999999999997, 254.99999999999997)),\n            ((94.47222222222223, 63.74999999999999, 127.49999999999999),\n            (129.27777777777777, 127.49999999999999, 254.99999999999997))),\n    'сиреневый': (((146.68055555555554, 127.49999999999999, 63.74999999999999),\n                (169.05555555555554, 254.99999999999997, 254.99999999999997)),\n                ((146.68055555555554, 63.74999999999999, 127.49999999999999),\n                (169.05555555555554, 127.49999999999999, 254.99999999999997))),\n    'фиолетовый': (((129.27777777777777, 127.49999999999999, 63.74999999999999),\n                    (146.68055555555554, 254.99999999999997, 254.99999999999997)),\n                ((129.27777777777777, 63.74999999999999, 127.49999999999999),\n                    (146.68055555555554, 127.49999999999999, 254.99999999999997))),\n    'чёрный': (\n        (\n            (0.0, 0.0, 0.0), (178.50277777777777, 254.99999999999997, 25.5)\n        ),\n    ),\n    'черный': (\n        (\n            (0.0, 0.0, 0.0), (178.50277777777777, 254.99999999999997, 25.5)\n        ),\n    )\n }\n\n\ndef detect_shapes(data):\n    def get_mask(img):\n        img = cv2.GaussianBlur(img, (3, 3), sigmaX=4, sigmaY=4)\n        if 'color' in data:\n            if data['color'] in colors:\n                hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n                mask = np.zeros(hsv.shape[:-1], dtype=hsv.dtype)\n                for low_c, up_c in colors[data['color']]:\n                    mask1 = cv2.inRange(hsv, low_c, up_c)\n                    mask = cv2.bitwise_or(mask, mask1)\n                del data['color']\n            else:\n                return None\n        else:\n            gr = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n            _, mask = cv2.threshold(gr, 220, 255, cv2.THRESH_BINARY)\n        kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3, 3))\n        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel) # noise reduction\n        return mask\n\n    def get_shapes(mask):\n        screen_size = pyautogui.size()\n        shapes = []\n        min_area = 30\n        max_area = np.prod(screen_size) / 2\n        min_line_area = 30\n        thickness = 5\n        k = 3\n        is_line = data['shape'] == 'линия'\n\n        mode = cv2.RETR_EXTERNAL\n        cnts, _ = cv2.findContours(mask, mode, cv2.CHAIN_APPROX_SIMPLE)\n        for c in cnts:\n            if len(c) > 500: \n                continue\n            if data['shape'] == 'прямоугольник':\n                is_closed = True        \n                peri = cv2.arcLength(c, is_closed)    \n                approx = cv2.approxPolyDP(c, 0.01*peri, is_closed)\n                if len(approx) == 4:\n                    rect = cv2.minAreaRect(approx)\n                else:\n                    continue\n            else:\n                cnt = cv2.convexHull(c)\n                rect = cv2.minAreaRect(cnt)\n            width, height = rect[1][::-1] if np.abs(rect[2]) == 90 else rect[1]\n            check_rect_size = True\n            if 'width_low' in data:\n                check_rect_size &= data['width_low'] < width\n            if 'width_up' in data:\n                check_rect_size &= width < data['width_up']\n            if 'height_low' in data:\n                check_rect_size &= data['height_low'] < height\n            if 'height_up' in data:\n                check_rect_size &= height < data['height_up']\n\n            check_line_size = ((width < thickness and height > k*width) \\\n                or (height < thickness and width > k*height)) \\\n                and height*width > min_line_area\n            check_rect_size &= width > thickness  \\\n                and height > thickness \\\n                and min_area < cv2.contourArea(c) \\\n                and width*height < max_area\n            \n            if (is_line and check_line_size) \\\n                    or (not is_line and check_rect_size):\n                shapes.append(rect)\n        shapes = sorted(shapes, key=lambda x: x[0][::-1])\n\n        data.pop('shape', None)\n        data.pop('width_low', None)\n        data.pop('width_up', None)\n        data.pop('height_low', None)\n        data.pop('height_up', None)\n        return shapes\n\n    def draw_shapes(shapes, img):\n        centers = []\n        color = (0, 255, 0)\n        thickness = 2\n        for i, shape in enumerate(shapes):\n            box = np.int0(cv2.boxPoints(shape))\n            cv2.drawContours(img, [box], -1, color, thickness)\n            center = int(shape[0][0]), int(shape[0][1])\n            cv2.putText(img, str(i), center,\n                cv2.FONT_HERSHEY_SIMPLEX, 0.6,\n                (255, 128, 0), \n                thickness)\n            centers.append(center)\n        return centers\n\n    try:\n        img = pyautogui.screenshot()\n        img = np.array(img)\n        img = img[:, :, ::-1] # conversion from RGB to BGR\n        imgToShow = img.copy()\n        \n        mask = get_mask(img)\n        if mask is None:\n            data['error'] = \"Такого цвета нет\"\n        else:\n            shapes = get_shapes(mask)\n            if shapes:\n                shapes = draw_shapes(shapes, imgToShow)\n                file_name = 'detected_objects.png'\n                cv2.imwrite(file_name, imgToShow)\n                data['img'] = file_name\n                data['shapes'] = shapes\n            else:\n                data['error'] = 'Ничего не нашел'\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\ndetect_shapes(data)\n", "language": "PYTHON", "_id": "973d0897-06bf-4eb7-ab41-efd4902e279b"}, "detect_text": {"name": "detect_text", "phrase": "найди текст", "paramType": {"text": "String", "lang": "enum[русский, английский", "russian": {"text": "текст", "lang": "язык"}}, "returnType": {"shapes": "int[][2", "img": "path"}, "code": "from collections import namedtuple\nfrom functools import lru_cache\nfrom itertools import product\nimport re\n\nimport cv2\nimport pyautogui\nimport pytesseract\nimport numpy as np\n\n\ndef detect_text(data):\n    try:\n        SCREEN_X, SCREEN_Y = pyautogui.size()\n        img = pyautogui.screenshot()\n        lang = 'eng'\n        if data['lang'] == 'русский':\n            lang = 'rus'\n        found = pytesseract.image_to_boxes(img, lang=lang, output_type=pytesseract.Output.DICT)\n\n        phrase = data['text']\n        del data['text']\n\n        text = \"\".join(found['char'])\n\n        red = re.compile('[,.@|:;—<>=+-^\"`!?()*&%$#_»«\\n~…®©\\'“”№{}›‘°„]')\n        re_space = re.compile('\\s+')\n\n        phrase = red.sub(' ', phrase.lower())\n        phrase = re_space.sub(' ' , phrase)\n\n        for m in sorted(red.finditer(text), key=lambda x: x.span()[0], reverse=True):\n            i = m.span()[0]\n            del found['char'][i]\n            del found['left'][i]\n            del found['right'][i]\n            del found['bottom'][i]\n            del found['top'][i]\n\n\n        text = \"\".join(found['char']).lower()\n\n        words = tuple(phrase.split())\n        n_words = len(words)\n        matches = []\n        n_min = (2 if n_words > 4 else (2 if n_words > 1 else 1)) - 1\n        Match = namedtuple('m', ['l', 'r'])\n\n        @lru_cache(maxsize=128)\n        def find(words):\n            res = []\n            ms = list(re.finditer(\"\".join(words), text))\n            if ms:\n                for m in ms:\n                    mat = Match(*m.span())\n                    if all([mat.l > v.r or mat.r < v.l or (mat.l <= v.l and v.r <= mat.r) for v in matches]):\n                        res.append(mat)\n                matches.extend(res)\n            return res\n\n        result = []\n\n        def find_phrases(words, mss, n):\n            if not words: \n                return None\n            for j in range(len(words), n_min, -1):\n                ws = words[:j]\n                n += len(ws)\n                ms = find(ws)\n                if ms:\n                    mss.append(ms)\n                    if n == n_words:\n                        result.append(mss.copy())\n                        mss.pop()\n                        n -= len(ws)\n                        continue\n                    find_phrases(words[j:], mss, n)\n                    mss.pop()\n                n -= len(ws)\n\n        find_phrases(words, [], 0)\n\n        rects = []\n        for res in result:\n            for ms in product(*res):\n                r_pre = ms[0].l\n                right_max = top_max = 0\n                bottom_min = left_min = SCREEN_X\n                for m in ms:\n                    diff = m.l - r_pre\n                    if diff > 300 or diff < 0:\n                        break\n                    for j in range(m.l, m.r):\n                        if found['left'][j] < left_min: left_min = found['left'][j]\n                        if found['right'][j] > right_max: right_max = found['right'][j]\n                        if found['bottom'][j] < bottom_min: bottom_min = found['bottom'][j]\n                        if found['top'][j] > top_max: top_max = found['top'][j]\n                    r_pre = m.r\n                else:\n                    rects.append(((left_min, SCREEN_Y-top_max), (right_max, SCREEN_Y-bottom_min)))\n\n        if rects:\n            centers = []\n            rects = sorted(rects, key=lambda x: x[0][::-1])\n            img = np.array(img)\n            for i, rect in enumerate(rects):\n                cv2.rectangle(img, *rect, (0, 255, 0), 2)\n                center = rect[0][0] + (rect[1][0] - rect[0][0]) // 2, rect[0][1] + (rect[1][1] - rect[0][1]) // 2 \n                cv2.putText(img, str(i), center, \n                    cv2.FONT_HERSHEY_SIMPLEX, 1, \n                    (0, 128, 255), 2)\n                centers.append(center)\n\n            file_name = 'detected_text.png'\n            cv2.imwrite(file_name, cv2.cvtColor(img, cv2.COLOR_RGB2BGR))\n            data['shapes'] = centers\n            data['img'] = file_name\n        else:\n            data['error'] = \"Ничего не нашел\"\n\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\n\ndetect_text(data)\n", "language": "PYTHON", "_id": "0f253425-50c5-4cc3-b713-3c8c5888a4a6"}, "show_shapes": {"name": "show_shapes", "phrase": "покажи найденное", "historyArgs": {"img": "path"}, "returnType": {"img_pid": "int"}, "code": "from multiprocessing import Process\n\nimport cv2\nimport matplotlib.pyplot as plt\n\n\ndef show_shapes(data):\n    if 'img' in data:\n        if cv2.imread(data['img']) is None:\n            data['error'] = \"Такого изображения с найденными объектами не существует. \" \\\n                            \"Попробуйте снова выполнить команду поиска нужных объектов.\"\n        else:\n            data['code'] = '''\nimport cv2\nimport matplotlib.pyplot as plt\nimg = cv2.imread(data['img'])\nimg = cv2.resize(img, (int(img.shape[1]/1.1), int(img.shape[0]/1.1)))\nimg = img[:, :, ::-1]\ndpi = 120\nheight, width, _ = img.shape\n\nfigsize = width / float(dpi), height / float(dpi)\n\nfig = plt.figure(figsize=figsize)\nax = fig.add_axes([0, 0, 1, 1])\n\nax.axis('off')\n\nax.imshow(img)\nfigManager = plt.get_current_fig_manager()\nfigManager.full_screen_toggle()\nplt.show()'''\n            process = Process(target=temp, args=(data,))\n            process.start()\n            data['img_pid'] = process.pid\n            del data['code']\n    else:\n        data['error'] = \"Требуется аргумент 'img'. \" \\\n                        \"Попробуйте снова выполнить команду поиска нужных объектов.\"\n    return data\n\nshow_shapes(data)\n", "language": "PYTHON", "_id": "35dfd891-6059-435d-94b3-c679182d9252"}, "choose_shape": {"name": "choose_shape", "phrase": "выбираю объект", "paramType": {"shape_num": "int", "russian": {"shape_num": "номер объекта"}}, "historyArgs": {"shapes": "int[][2", "img_pid": "int"}, "returnType": {"xy": "int[2"}, "code": "import psutil\nimport pyautogui\n\n\ndef choose_shape(data):\n    try:\n        num = int(data['shape_num'])\n        data['xy'] = data['shapes'][num]     \n        pyautogui.moveTo(*data['xy'])\n        del data['shape_num']\n        if 'img_pid' in data:\n            pid = data['img_pid']\n            p = psutil.Process(pid)\n            p.kill()\n            del data['img_pid']\n    except ValueError:\n        data['error'] = \"Аргумент 'shape_num' должен быть целым положительным числом\"\n    except KeyError as e:\n        data['error'] = f\"Требуется аргумент '{e.args[0]}'\"\n    except IndexError:\n        data['error'] = f\"Объекта с индексом {num} не существует\"\n    except Exception as e:\n        data['error'] = str(e)\n    return data\n\nchoose_shape(data)\n", "language": "PYTHON", "_id": "ffd8fba6-2b6f-4c8b-860c-f712c10f5058"}}